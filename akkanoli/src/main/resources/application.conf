akka {
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    logLevel = "DEBUG"
    event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
    log-dead-letters = 0
    log-dead-letters-during-shutdown = off
    log-config-on-start = off
    actor {
        provider = "akka.cluster.ClusterActorRefProvider"
        debug {
            autoreceive = on
            lifecycle = on
            event-stream = on
        }
    }
    remote {
        transport = "akka.remote.netty.NettyRemoteTransport"
        log-sent-messages = on
        log-received-messages = on
        log-remote-lifecycle-events = off
        netty.tcp {
            hostname = "127.0.0.1"
            port = 0
        }
    }
    cluster {
        seed-nodes = [
          "akka.tcp://ClusterSystem@127.0.0.1:2551",
          "akka.tcp://ClusterSystem@127.0.0.1:2552"
          ]

        auto-down-unreachable-after = 10s
      }

    # Settings for the DistributedPubSubExtension
    akka.contrib.cluster.pub-sub {
      # Actor name of the mediator actor, /user/distributedPubSubMediator
      name = distributedPubSubMediator

      # Start the mediator on members tagged with this role.
      # All members are used if undefined or empty.
      role = ""

      # The routing logic to use for 'Send'
      # Possible values: random, round-robin, broadcast
      routing-logic = random

      # How often the DistributedPubSubMediator should send out gossip information
      gossip-interval = 1s

      # Removed entries are pruned after this duration
      removed-time-to-live = 120s

      # Maximum number of elements to transfer in one message when synchronizing the registries.
      # Next chunk will be transferred in next round of gossip.
      max-delta-elements = 3000

    }

      extensions = ["akka.contrib.pattern.DistributedPubSubExtension"]
}