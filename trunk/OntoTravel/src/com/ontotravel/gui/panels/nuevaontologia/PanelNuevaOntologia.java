/*
 * PanelNuevaOntologia.java
 *
 * Created on 18 de agosto de 2008, 10:02
 */
package com.ontotravel.gui.panels.nuevaontologia;

import com.ontotravel.gui.FramePrincipal;
import com.ontotravel.mvc.controller.ControladorPanelNuevaOntologia;
import com.ontotravel.mvc.model.BusinessDelegate;
import com.ontotravel.mvc.view.VistaNuevaOntologia;
import com.ontotravel.util.Constantes;
import com.ontotravel.util.JListCellRenderer;
import com.ontotravel.util.JListItem;
import com.ontotravel.vo.DatatypePropertyVO;
import com.ontotravel.vo.IndividualViajesVO;
import com.ontotravel.vo.ObjectPropertyVO;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map.Entry;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTree;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreePath;

/**
 *
 * @author  Administrador
 */
public class PanelNuevaOntologia extends javax.swing.JPanel {

    private int varEnterNameClass;
    private int varEnterNameIndividual;
    private int varEnterURI;
    private FramePrincipal main;
    private VistaNuevaOntologia vistaNuevaOntologia;
    private String urlOWL;
    private String chooserButton;
    private boolean cargarOntologia;
    private boolean nuevaOntologia;
    private boolean cargarClase;
    private boolean cargarObjectProperty;
    private boolean cargarDatatypeProperty;
    private boolean cargarIndividual;
    private TreeSelectionEvent eventoTree;
    private DefaultTreeModel modelo;
    private DefaultMutableTreeNode abuelo;
    private Toolkit toolkit = Toolkit.getDefaultToolkit();
    private HashMap<String, DefaultMutableTreeNode> mapaNodos;
    private String classNameAux;
    private String individualNameAux;

    /** Creates new form PanelNuevaOntologia */
    public PanelNuevaOntologia(FramePrincipal ref, VistaNuevaOntologia vistaN) {
        this.main = ref;
        this.vistaNuevaOntologia = vistaN;
        initComponents();
        initComponents2();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        panelMetadata = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        textFieldURI = new javax.swing.JTextField();
        panelClasses = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        treeClasses = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        listProperties = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        buttonRemoveProperty = new javax.swing.JButton();
        buttonAddProperty = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        textFieldClassName = new javax.swing.JTextField();
        buttonRemoverClass = new javax.swing.JButton();
        buttonAgregarClass = new javax.swing.JButton();
        panelAgregarNombre = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        textFieldNombreClase = new javax.swing.JTextField();
        buttonOkNombre = new javax.swing.JButton();
        buttonCancelNombre = new javax.swing.JButton();
        panelProperties = new javax.swing.JPanel();
        tabbedPropertyType = new javax.swing.JTabbedPane();
        panelTabbedObjectProperty = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listPropertiesObject = new javax.swing.JList();
        buttonAddObjectProperty = new javax.swing.JButton();
        buttonRemoveObjectProperty = new javax.swing.JButton();
        panelAddObjectProperty = new javax.swing.JPanel();
        buttonCancelObjectProperty = new javax.swing.JButton();
        buttonOkObjectProperty = new javax.swing.JButton();
        textFieldNameObjectProperty = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        panelTabbedDatatypeProperty = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        listPropertiesDatatype = new javax.swing.JList();
        buttonRemoveDatatypeProperty = new javax.swing.JButton();
        buttonAddDatatypeProperty = new javax.swing.JButton();
        panelAddDatatypeProperty = new javax.swing.JPanel();
        buttonOkDatatypeProperty = new javax.swing.JButton();
        buttonCancelDatatypeProperty = new javax.swing.JButton();
        textFieldNameDatatypeProperty = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        panelPropertyDefault = new javax.swing.JPanel();
        panelIndividuals = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        treeClasses2 = new javax.swing.JTree();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        listIndividuals = new javax.swing.JList();
        panelIndividualData = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        textFieldNombreIndividual = new javax.swing.JTextField();
        jScrollPane7 = new javax.swing.JScrollPane();
        panelIndividualProperties = new javax.swing.JPanel();
        panelAddIndividual = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        textFieldAddIndividual = new javax.swing.JTextField();
        buttonOkIndividual = new javax.swing.JButton();
        buttonCancelIndividual = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        buttonAddIndividual = new javax.swing.JButton();
        buttonRemoveIndividual = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1023, 532));

        jLabel1.setText("Ontology URI");

        textFieldURI.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textFieldURIFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                textFieldURIFocusLost(evt);
            }
        });
        textFieldURI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textFieldURIKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout panelMetadataLayout = new javax.swing.GroupLayout(panelMetadata);
        panelMetadata.setLayout(panelMetadataLayout);
        panelMetadataLayout.setHorizontalGroup(
            panelMetadataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMetadataLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelMetadataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textFieldURI, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(674, Short.MAX_VALUE))
        );
        panelMetadataLayout.setVerticalGroup(
            panelMetadataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMetadataLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textFieldURI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(429, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Metadata", new javax.swing.ImageIcon("C:\\Users\\Brunoli\\Documents\\NetBeansProjects\\OntoTravel\\icons\\project.gif"), panelMetadata); // NOI18N

        jScrollPane1.setViewportView(treeClasses);

        listProperties.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(listProperties);

        jLabel2.setText("Jerarquia");

        jLabel3.setText("Propiedades");

        buttonRemoveProperty.setIcon(new javax.swing.ImageIcon("C:\\Users\\Brunoli\\Documents\\NetBeansProjects\\OntoTravel\\icons\\removeProperty.gif")); // NOI18N
        buttonRemoveProperty.setContentAreaFilled(false);
        buttonRemoveProperty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemovePropertyActionPerformed(evt);
            }
        });

        buttonAddProperty.setIcon(new javax.swing.ImageIcon("C:\\Users\\Brunoli\\Documents\\NetBeansProjects\\OntoTravel\\icons\\Prueba.gif")); // NOI18N
        buttonAddProperty.setContentAreaFilled(false);
        buttonAddProperty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddPropertyActionPerformed(evt);
            }
        });

        jLabel4.setText("Clase");

        textFieldClassName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textFieldClassNameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                textFieldClassNameFocusLost(evt);
            }
        });
        textFieldClassName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textFieldClassNameKeyTyped(evt);
            }
        });

        buttonRemoverClass.setIcon(new javax.swing.ImageIcon("C:\\Users\\Brunoli\\Documents\\NetBeansProjects\\OntoTravel\\icons\\class.delete.gif")); // NOI18N
        buttonRemoverClass.setContentAreaFilled(false);
        buttonRemoverClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoverClassActionPerformed(evt);
            }
        });

        buttonAgregarClass.setIcon(new javax.swing.ImageIcon("C:\\Users\\Brunoli\\Documents\\NetBeansProjects\\OntoTravel\\icons\\class.create.gif")); // NOI18N
        buttonAgregarClass.setContentAreaFilled(false);
        buttonAgregarClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAgregarClassActionPerformed(evt);
            }
        });

        jLabel7.setText("Nombre");

        textFieldNombreClase.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textFieldNombreClaseKeyTyped(evt);
            }
        });

        buttonOkNombre.setIcon(new javax.swing.ImageIcon("C:\\Users\\Brunoli\\Documents\\NetBeansProjects\\OntoTravel\\icons\\ok.gif")); // NOI18N
        buttonOkNombre.setContentAreaFilled(false);
        buttonOkNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOkNombreActionPerformed(evt);
            }
        });

        buttonCancelNombre.setIcon(new javax.swing.ImageIcon("C:\\Users\\Brunoli\\Documents\\NetBeansProjects\\OntoTravel\\icons\\cancel.gif")); // NOI18N
        buttonCancelNombre.setContentAreaFilled(false);
        buttonCancelNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelNombreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelAgregarNombreLayout = new javax.swing.GroupLayout(panelAgregarNombre);
        panelAgregarNombre.setLayout(panelAgregarNombreLayout);
        panelAgregarNombreLayout.setHorizontalGroup(
            panelAgregarNombreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAgregarNombreLayout.createSequentialGroup()
                .addComponent(jLabel7)
                .addGap(14, 14, 14)
                .addComponent(textFieldNombreClase, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonOkNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonCancelNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );
        panelAgregarNombreLayout.setVerticalGroup(
            panelAgregarNombreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAgregarNombreLayout.createSequentialGroup()
                .addGroup(panelAgregarNombreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(buttonCancelNombre)
                    .addComponent(buttonOkNombre)
                    .addComponent(textFieldNombreClase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelClassesLayout = new javax.swing.GroupLayout(panelClasses);
        panelClasses.setLayout(panelClassesLayout);
        panelClassesLayout.setHorizontalGroup(
            panelClassesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelClassesLayout.createSequentialGroup()
                .addGroup(panelClassesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelClassesLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(buttonAgregarClass, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonRemoverClass, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelClassesLayout.createSequentialGroup()
                        .addGroup(panelClassesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelClassesLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(panelAgregarNombre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelClassesLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)))
                        .addGap(39, 39, 39)
                        .addGroup(panelClassesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelClassesLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(52, 52, 52)
                                .addComponent(buttonAddProperty, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(buttonRemoveProperty, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelClassesLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(34, 34, 34)
                                .addComponent(textFieldClassName, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(205, Short.MAX_VALUE))
        );
        panelClassesLayout.setVerticalGroup(
            panelClassesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelClassesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelClassesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelClassesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(buttonAgregarClass, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(buttonRemoverClass, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelAgregarNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelClassesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                    .addGroup(panelClassesLayout.createSequentialGroup()
                        .addGroup(panelClassesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(textFieldClassName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelClassesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel3)
                            .addComponent(buttonAddProperty, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonRemoveProperty, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Clases", new javax.swing.ImageIcon("C:\\Users\\Brunoli\\Documents\\NetBeansProjects\\OntoTravel\\icons\\TreeBold2.gif"), panelClasses); // NOI18N

        tabbedPropertyType.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbedPropertyTypeStateChanged(evt);
            }
        });

        jLabel5.setText("Object Properties");

        listPropertiesObject.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listPropertiesObject.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listPropertiesObjectValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(listPropertiesObject);

        buttonAddObjectProperty.setIcon(new javax.swing.ImageIcon("C:\\Users\\Brunoli\\Documents\\NetBeansProjects\\OntoTravel\\icons\\createObjectProperty.gif")); // NOI18N
        buttonAddObjectProperty.setContentAreaFilled(false);
        buttonAddObjectProperty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddObjectPropertyActionPerformed(evt);
            }
        });

        buttonRemoveObjectProperty.setIcon(new javax.swing.ImageIcon("C:\\Users\\Brunoli\\Documents\\NetBeansProjects\\OntoTravel\\icons\\removeObjectProperty.gif")); // NOI18N
        buttonRemoveObjectProperty.setContentAreaFilled(false);
        buttonRemoveObjectProperty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoveObjectPropertyActionPerformed(evt);
            }
        });

        buttonCancelObjectProperty.setIcon(new javax.swing.ImageIcon("C:\\Users\\Brunoli\\Documents\\NetBeansProjects\\OntoTravel\\icons\\cancel.gif")); // NOI18N
        buttonCancelObjectProperty.setContentAreaFilled(false);
        buttonCancelObjectProperty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelObjectPropertyActionPerformed(evt);
            }
        });

        buttonOkObjectProperty.setIcon(new javax.swing.ImageIcon("C:\\Users\\Brunoli\\Documents\\NetBeansProjects\\OntoTravel\\icons\\ok.gif")); // NOI18N
        buttonOkObjectProperty.setContentAreaFilled(false);
        buttonOkObjectProperty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOkObjectPropertyActionPerformed(evt);
            }
        });

        textFieldNameObjectProperty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textFieldNameObjectPropertyKeyTyped(evt);
            }
        });

        jLabel11.setText("Nombre");

        javax.swing.GroupLayout panelAddObjectPropertyLayout = new javax.swing.GroupLayout(panelAddObjectProperty);
        panelAddObjectProperty.setLayout(panelAddObjectPropertyLayout);
        panelAddObjectPropertyLayout.setHorizontalGroup(
            panelAddObjectPropertyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddObjectPropertyLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textFieldNameObjectProperty, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonOkObjectProperty, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonCancelObjectProperty, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelAddObjectPropertyLayout.setVerticalGroup(
            panelAddObjectPropertyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddObjectPropertyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                .addComponent(buttonOkObjectProperty, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(buttonCancelObjectProperty, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(textFieldNameObjectProperty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel11))
        );

        javax.swing.GroupLayout panelTabbedObjectPropertyLayout = new javax.swing.GroupLayout(panelTabbedObjectProperty);
        panelTabbedObjectProperty.setLayout(panelTabbedObjectPropertyLayout);
        panelTabbedObjectPropertyLayout.setHorizontalGroup(
            panelTabbedObjectPropertyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTabbedObjectPropertyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTabbedObjectPropertyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                    .addGroup(panelTabbedObjectPropertyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(panelAddObjectProperty, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelTabbedObjectPropertyLayout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addGap(39, 39, 39)
                            .addComponent(buttonAddObjectProperty, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(buttonRemoveObjectProperty, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        panelTabbedObjectPropertyLayout.setVerticalGroup(
            panelTabbedObjectPropertyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTabbedObjectPropertyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTabbedObjectPropertyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(buttonRemoveObjectProperty)
                    .addComponent(buttonAddObjectProperty)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelAddObjectProperty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabbedPropertyType.addTab("Object", panelTabbedObjectProperty);

        jLabel6.setText("Datatype properties");

        listPropertiesDatatype.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listPropertiesDatatype.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listPropertiesDatatypeValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(listPropertiesDatatype);

        buttonRemoveDatatypeProperty.setIcon(new javax.swing.ImageIcon("C:\\Users\\Brunoli\\Documents\\NetBeansProjects\\OntoTravel\\icons\\removeDatatypeProperty.gif")); // NOI18N
        buttonRemoveDatatypeProperty.setContentAreaFilled(false);
        buttonRemoveDatatypeProperty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoveDatatypePropertyActionPerformed(evt);
            }
        });

        buttonAddDatatypeProperty.setIcon(new javax.swing.ImageIcon("C:\\Users\\Brunoli\\Documents\\NetBeansProjects\\OntoTravel\\icons\\createDatatypeProperty.gif")); // NOI18N
        buttonAddDatatypeProperty.setContentAreaFilled(false);
        buttonAddDatatypeProperty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddDatatypePropertyActionPerformed(evt);
            }
        });

        buttonOkDatatypeProperty.setIcon(new javax.swing.ImageIcon("C:\\Users\\Brunoli\\Documents\\NetBeansProjects\\OntoTravel\\icons\\ok.gif")); // NOI18N
        buttonOkDatatypeProperty.setContentAreaFilled(false);
        buttonOkDatatypeProperty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOkDatatypePropertyActionPerformed(evt);
            }
        });

        buttonCancelDatatypeProperty.setIcon(new javax.swing.ImageIcon("C:\\Users\\Brunoli\\Documents\\NetBeansProjects\\OntoTravel\\icons\\cancel.gif")); // NOI18N
        buttonCancelDatatypeProperty.setContentAreaFilled(false);
        buttonCancelDatatypeProperty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelDatatypePropertyActionPerformed(evt);
            }
        });

        textFieldNameDatatypeProperty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textFieldNameDatatypePropertyKeyTyped(evt);
            }
        });

        jLabel12.setText("Nombre");

        javax.swing.GroupLayout panelAddDatatypePropertyLayout = new javax.swing.GroupLayout(panelAddDatatypeProperty);
        panelAddDatatypeProperty.setLayout(panelAddDatatypePropertyLayout);
        panelAddDatatypePropertyLayout.setHorizontalGroup(
            panelAddDatatypePropertyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddDatatypePropertyLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12)
                .addGap(18, 18, 18)
                .addComponent(textFieldNameDatatypeProperty, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonOkDatatypeProperty, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonCancelDatatypeProperty, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelAddDatatypePropertyLayout.setVerticalGroup(
            panelAddDatatypePropertyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddDatatypePropertyLayout.createSequentialGroup()
                .addGroup(panelAddDatatypePropertyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel12)
                    .addComponent(textFieldNameDatatypeProperty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonOkDatatypeProperty)
                    .addComponent(buttonCancelDatatypeProperty, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout panelTabbedDatatypePropertyLayout = new javax.swing.GroupLayout(panelTabbedDatatypeProperty);
        panelTabbedDatatypeProperty.setLayout(panelTabbedDatatypePropertyLayout);
        panelTabbedDatatypePropertyLayout.setHorizontalGroup(
            panelTabbedDatatypePropertyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTabbedDatatypePropertyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTabbedDatatypePropertyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelTabbedDatatypePropertyLayout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTabbedDatatypePropertyLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                        .addComponent(buttonAddDatatypeProperty, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonRemoveDatatypeProperty, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(64, 64, 64))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTabbedDatatypePropertyLayout.createSequentialGroup()
                        .addComponent(panelAddDatatypeProperty, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        panelTabbedDatatypePropertyLayout.setVerticalGroup(
            panelTabbedDatatypePropertyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTabbedDatatypePropertyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTabbedDatatypePropertyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel6)
                    .addComponent(buttonAddDatatypeProperty, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonRemoveDatatypeProperty, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelAddDatatypeProperty, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabbedPropertyType.addTab("Datatype", panelTabbedDatatypeProperty);

        panelPropertyDefault.setPreferredSize(new java.awt.Dimension(200, 100));
        panelPropertyDefault.setLayout(new java.awt.GridLayout(0, 1));

        javax.swing.GroupLayout panelPropertiesLayout = new javax.swing.GroupLayout(panelProperties);
        panelProperties.setLayout(panelPropertiesLayout);
        panelPropertiesLayout.setHorizontalGroup(
            panelPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPropertiesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPropertyType, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelPropertyDefault, javax.swing.GroupLayout.DEFAULT_SIZE, 686, Short.MAX_VALUE)
                .addGap(22, 22, 22))
        );
        panelPropertiesLayout.setVerticalGroup(
            panelPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPropertiesLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(panelPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelPropertyDefault, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelPropertiesLayout.createSequentialGroup()
                        .addComponent(tabbedPropertyType, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)))
                .addGap(24, 24, 24))
        );

        jTabbedPane1.addTab("Propiedades", new javax.swing.ImageIcon("C:\\Users\\Brunoli\\Documents\\NetBeansProjects\\OntoTravel\\icons\\OWLObjectProperty.gif"), panelProperties); // NOI18N

        jScrollPane5.setViewportView(treeClasses2);

        jLabel8.setText("Jerarquia");

        jLabel9.setText("Instancias");

        jScrollPane6.setPreferredSize(new java.awt.Dimension(0, 0));

        listIndividuals.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listIndividuals.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listIndividualsValueChanged(evt);
            }
        });
        jScrollPane6.setViewportView(listIndividuals);

        jLabel10.setText("Instancia");

        textFieldNombreIndividual.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textFieldNombreIndividualFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                textFieldNombreIndividualFocusLost(evt);
            }
        });
        textFieldNombreIndividual.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textFieldNombreIndividualKeyTyped(evt);
            }
        });

        panelIndividualProperties.setLayout(new java.awt.GridLayout(0, 1));
        jScrollPane7.setViewportView(panelIndividualProperties);

        javax.swing.GroupLayout panelIndividualDataLayout = new javax.swing.GroupLayout(panelIndividualData);
        panelIndividualData.setLayout(panelIndividualDataLayout);
        panelIndividualDataLayout.setHorizontalGroup(
            panelIndividualDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelIndividualDataLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(panelIndividualDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelIndividualDataLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(50, 50, 50)
                        .addComponent(textFieldNombreIndividual, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(panelIndividualDataLayout.createSequentialGroup()
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                        .addGap(31, 31, 31))))
        );
        panelIndividualDataLayout.setVerticalGroup(
            panelIndividualDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelIndividualDataLayout.createSequentialGroup()
                .addGroup(panelIndividualDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldNombreIndividual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(17, 17, 17)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE))
        );

        jLabel13.setText("Nombre");

        textFieldAddIndividual.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textFieldAddIndividualKeyTyped(evt);
            }
        });

        buttonOkIndividual.setIcon(new javax.swing.ImageIcon("C:\\Users\\Brunoli\\Documents\\NetBeansProjects\\OntoTravel\\icons\\ok.gif")); // NOI18N
        buttonOkIndividual.setContentAreaFilled(false);
        buttonOkIndividual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOkIndividualActionPerformed(evt);
            }
        });

        buttonCancelIndividual.setIcon(new javax.swing.ImageIcon("C:\\Users\\Brunoli\\Documents\\NetBeansProjects\\OntoTravel\\icons\\cancel.gif")); // NOI18N
        buttonCancelIndividual.setContentAreaFilled(false);
        buttonCancelIndividual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelIndividualActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelAddIndividualLayout = new javax.swing.GroupLayout(panelAddIndividual);
        panelAddIndividual.setLayout(panelAddIndividualLayout);
        panelAddIndividualLayout.setHorizontalGroup(
            panelAddIndividualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddIndividualLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textFieldAddIndividual, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonOkIndividual, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonCancelIndividual, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );
        panelAddIndividualLayout.setVerticalGroup(
            panelAddIndividualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddIndividualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                .addComponent(buttonCancelIndividual)
                .addComponent(buttonOkIndividual)
                .addComponent(textFieldAddIndividual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel13))
        );

        buttonAddIndividual.setIcon(new javax.swing.ImageIcon("C:\\Users\\Brunoli\\Documents\\NetBeansProjects\\OntoTravel\\icons\\createIndividual.gif")); // NOI18N
        buttonAddIndividual.setContentAreaFilled(false);
        buttonAddIndividual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddIndividualActionPerformed(evt);
            }
        });

        buttonRemoveIndividual.setIcon(new javax.swing.ImageIcon("C:\\Users\\Brunoli\\Documents\\NetBeansProjects\\OntoTravel\\icons\\removeIndividual.gif")); // NOI18N
        buttonRemoveIndividual.setContentAreaFilled(false);
        buttonRemoveIndividual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoveIndividualActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonAddIndividual, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonRemoveIndividual, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(208, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonAddIndividual)
                    .addComponent(buttonRemoveIndividual))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelIndividualsLayout = new javax.swing.GroupLayout(panelIndividuals);
        panelIndividuals.setLayout(panelIndividualsLayout);
        panelIndividualsLayout.setHorizontalGroup(
            panelIndividualsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelIndividualsLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panelIndividualsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(panelIndividualsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelIndividualsLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(panelIndividualsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(panelAddIndividual, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelIndividualsLayout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(panelIndividualsLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel9)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelIndividualData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(10, 10, 10))
        );
        panelIndividualsLayout.setVerticalGroup(
            panelIndividualsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelIndividualsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelIndividualsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelIndividualData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelIndividualsLayout.createSequentialGroup()
                        .addGroup(panelIndividualsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addGap(15, 15, 15)
                        .addGroup(panelIndividualsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelIndividualsLayout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(panelAddIndividual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(13, 13, 13)
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE))
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE))))
                .addGap(26, 26, 26))
        );

        jTabbedPane1.addTab("Instancia", new javax.swing.ImageIcon("C:\\Users\\Brunoli\\Documents\\NetBeansProjects\\OntoTravel\\icons\\OWLIndividual.gif"), panelIndividuals); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1003, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initComponents2() {
        panelAgregarNombre.setVisible(false);
        panelAddDatatypeProperty.setVisible(false);
        panelAddObjectProperty.setVisible(false);
        panelAddIndividual.setVisible(false);
        mapaNodos = new HashMap<String, DefaultMutableTreeNode>();

        ImageIcon leafIcon = new ImageIcon(Constantes.ICONTREE);
        if (leafIcon != null) {
            DefaultTreeCellRenderer renderer =
                    new DefaultTreeCellRenderer();
            renderer.setOpenIcon(leafIcon);
            renderer.setClosedIcon(leafIcon);
            renderer.setLeafIcon(leafIcon);
            treeClasses.setCellRenderer(renderer);
            jScrollPane1.setViewportView(treeClasses);
        }

        setCargarClase(false);
        setCargarDatatypeProperty(false);
        setCargarObjectProperty(false);
        setCargarOntologia(false);
        setNuevaOntologia(false);
        setCargarIndividual(false);
    }

    public void modoCargar() {
        ((ControladorPanelNuevaOntologia) getVistaNuevaOntologia().getControlador()).doCargarOWL(true);
    }

    public void modoNuevo() {
        ((ControladorPanelNuevaOntologia) getVistaNuevaOntologia().getControlador()).doNuevaOWL(true);
    }

    public void nuevaOntologia() {
        ((BusinessDelegate) getVistaNuevaOntologia().getModelo()).nuevaOntologia();
    }

    public void cargarOntologia() {
        ((BusinessDelegate) getVistaNuevaOntologia().getModelo()).cargarOntologia(getUrlOWL());
    }

    public void guardarOntologia() {
        //Grabar ontologia
        ((BusinessDelegate) getVistaNuevaOntologia().getModelo()).grabarOntologia(urlOWL);
        ((BusinessDelegate) getVistaNuevaOntologia().getModelo()).cargarConfiguracion(main.getConfiguration());
    }

    public void update() {
        if (nuevaOntologia) {
            vaciarPaneles();
            nuevaOntologia();
            cargarOntologiaDefault();
        }
        if (cargarOntologia) {
            vaciarPaneles();
            cargarOntologia();
            cargarPaneles();
        }
        if (isCargarClase()) {
            cargarClase();
        }
        if (isCargarDatatypeProperty()) {
            cargarDatatypeProperty();
        }
        if (isCargarObjectProperty()) {
            cargarObjectProperty();
        }
        if (isCargarIndividual()) {
            cargarIndividual();
        }
    }

    public void changePropiedadIndividual(String pro, String valor) {
        JListItem item = (JListItem) listIndividuals.getSelectedValue();
        String ind = item.getTitle();
        ((BusinessDelegate) getVistaNuevaOntologia().getModelo()).changePropiedadIndividual(ind, pro, valor);
    }

    public void cargarIndividual() {
        if (!listIndividuals.isSelectionEmpty()) {
            JListItem item = (JListItem) listIndividuals.getSelectedValue();
            String ind = item.getTitle();
            IndividualViajesVO indVO = ((BusinessDelegate) getVistaNuevaOntologia().getModelo()).obtenerIndividualViajes(ind);
            textFieldNombreIndividual.setText(indVO.getNombre());
            panelIndividualProperties.removeAll();
            List<DatatypePropertyVO> datatypeProperties = indVO.getDatatypeProperties();
            //nombrepropiedad,valor,tipo
            for (int i = 0; i < datatypeProperties.size(); i++) {
                DatatypePropertyVO datapro = datatypeProperties.get(i);
                PanelIndividualDatatypeProperty panelData = new PanelIndividualDatatypeProperty(this);
                if (datapro.getValor() != null) {
                    String valor = datapro.getValor();
                    panelData.getTextFieldValorProperty().setText(valor);
                }
                panelData.getLabelNombrePropiedad().setText(datapro.getName());
                panelData.getComboBoxType().setSelectedItem(datapro.getRange());
                panelIndividualProperties.add(panelData);
            }
            List<ObjectPropertyVO> objectProperties = indVO.getObjectProperties();
            //nombrepropiedad,valor,range
            for (int i = 0; i < objectProperties.size(); i++) {
                ObjectPropertyVO objpro = objectProperties.get(i);
                PanelIndividualObjectProperty panelObj = new PanelIndividualObjectProperty(this, objpro.getRange().get(0));
                panelObj.getLabelNombrePropiedad().setText(objpro.getName());
                if (objpro.getValor() != null) {
                    panelObj.getTextFieldValorPropiedad().setText(objpro.getValor());
                }
                panelIndividualProperties.add(panelObj);
            }
            recargarPanel(panelIndividualProperties);
        }
    }

private void buttonAgregarClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAgregarClassActionPerformed
    panelAgregarNombre.setVisible(true);

}//GEN-LAST:event_buttonAgregarClassActionPerformed

private void buttonRemoverClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoverClassActionPerformed
    panelAgregarNombre.setVisible(false);
    removeCurrentNode();
}//GEN-LAST:event_buttonRemoverClassActionPerformed

private void buttonOkNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOkNombreActionPerformed
    if (!mapaNodos.containsKey(textFieldNombreClase.getText())) {
        addObject(textFieldNombreClase.getText());
        TreePath parentPath = treeClasses.getSelectionPath();
        DefaultMutableTreeNode parentNode = null;
        if (parentPath == null) {
            parentNode = abuelo;
        } else {
            parentNode = (DefaultMutableTreeNode) (parentPath.getLastPathComponent());
        }
        String hijo = textFieldNombreClase.getText();
        String padre = parentNode.getUserObject().toString();
        if (padre.equalsIgnoreCase("Classes")) {
            padre = null;
        }
        ((BusinessDelegate) getVistaNuevaOntologia().getModelo()).addClass(hijo, padre);
        textFieldNombreClase.setText("");
        panelAgregarNombre.setVisible(false);
    } else {
        textFieldNombreClase.setText("");
        JOptionPane.showMessageDialog(this, "Clase Existente", Constantes.APPLICATION_NAME, JOptionPane.ERROR_MESSAGE);
    }

}//GEN-LAST:event_buttonOkNombreActionPerformed

private void buttonCancelNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelNombreActionPerformed
    textFieldNombreClase.setText("");
    panelAgregarNombre.setVisible(false);
}//GEN-LAST:event_buttonCancelNombreActionPerformed

private void listPropertiesObjectValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listPropertiesObjectValueChanged
// Se selecciono un object propiedad en el panel de propiedades
    if (!listPropertiesObject.isSelectionEmpty()) {
        ((ControladorPanelNuevaOntologia) getVistaNuevaOntologia().getControlador()).doCargarObjectProperty(true);
    }
}//GEN-LAST:event_listPropertiesObjectValueChanged

private void listPropertiesDatatypeValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listPropertiesDatatypeValueChanged
// Se selecciono un datatype propiedad en el panel de propiedades
    ((ControladorPanelNuevaOntologia) getVistaNuevaOntologia().getControlador()).doCargarDatatypeProperty(true);
}//GEN-LAST:event_listPropertiesDatatypeValueChanged

private void buttonAddObjectPropertyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddObjectPropertyActionPerformed
    panelAddObjectProperty.setVisible(true);
}//GEN-LAST:event_buttonAddObjectPropertyActionPerformed

private void buttonAddDatatypePropertyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddDatatypePropertyActionPerformed
    panelAddDatatypeProperty.setVisible(true);
}//GEN-LAST:event_buttonAddDatatypePropertyActionPerformed

private void buttonRemoveObjectPropertyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoveObjectPropertyActionPerformed
    panelAddObjectProperty.setVisible(false);
    DefaultListModel model = (DefaultListModel) getListPropertiesObject().getModel();
    if (!listPropertiesObject.isSelectionEmpty()) {
        int aux = getListPropertiesObject().getSelectedIndex();
        JListItem item = (JListItem) model.getElementAt(aux);
        String nombre = item.getTitle();
        model.removeElementAt(aux);
        ((BusinessDelegate) getVistaNuevaOntologia().getModelo()).removeObjectProperty(nombre);
        panelPropertyDefault.removeAll();
    }
}//GEN-LAST:event_buttonRemoveObjectPropertyActionPerformed

private void buttonOkObjectPropertyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOkObjectPropertyActionPerformed
// Agrega Object Property
    String pro = textFieldNameObjectProperty.getText();
    if (!pro.isEmpty()) {
        ((BusinessDelegate) getVistaNuevaOntologia().getModelo()).addObjectProperty(pro);
        DefaultListModel model = (DefaultListModel) getListPropertiesObject().getModel();
        model.addElement(new JListItem(pro, Constantes.ICONOBJECTPROPERTY));
        panelAddObjectProperty.setVisible(false);
        textFieldNameObjectProperty.setText("");
    }

}//GEN-LAST:event_buttonOkObjectPropertyActionPerformed

private void buttonCancelObjectPropertyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelObjectPropertyActionPerformed
    panelAddObjectProperty.setVisible(false);
    textFieldNameObjectProperty.setText("");
}//GEN-LAST:event_buttonCancelObjectPropertyActionPerformed

private void buttonOkDatatypePropertyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOkDatatypePropertyActionPerformed
    String pro = textFieldNameDatatypeProperty.getText();
    if (!pro.isEmpty()) {
        ((BusinessDelegate) getVistaNuevaOntologia().getModelo()).addDatatypeProperty(pro);
        DefaultListModel model = (DefaultListModel) getListPropertiesDatatype().getModel();
        model.addElement(new JListItem(pro, Constantes.ICONDATATYPEPROPERTY));
        panelAddDatatypeProperty.setVisible(false);
        textFieldNameDatatypeProperty.setText("");
    }
}//GEN-LAST:event_buttonOkDatatypePropertyActionPerformed

private void buttonCancelDatatypePropertyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelDatatypePropertyActionPerformed
    panelAddDatatypeProperty.setVisible(false);
    textFieldNameDatatypeProperty.setText("");
}//GEN-LAST:event_buttonCancelDatatypePropertyActionPerformed

private void buttonRemoveDatatypePropertyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoveDatatypePropertyActionPerformed
    panelAddDatatypeProperty.setVisible(false);
    DefaultListModel model = (DefaultListModel) getListPropertiesDatatype().getModel();
    if (!listPropertiesDatatype.isSelectionEmpty()) {
        int aux = getListPropertiesDatatype().getSelectedIndex();
        JListItem item = (JListItem) model.getElementAt(aux);
        String nombre = item.getTitle();
        model.removeElementAt(aux);
        ((BusinessDelegate) getVistaNuevaOntologia().getModelo()).removeDatatypeProperty(nombre);
        panelPropertyDefault.removeAll();
    }
}//GEN-LAST:event_buttonRemoveDatatypePropertyActionPerformed

private void listIndividualsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listIndividualsValueChanged
    ((ControladorPanelNuevaOntologia) getVistaNuevaOntologia().getControlador()).doCargarIndividual(true);
}//GEN-LAST:event_listIndividualsValueChanged

private void buttonOkIndividualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOkIndividualActionPerformed
    String ind = textFieldAddIndividual.getText();
    String clase = treeClasses2.getSelectionPath().getLastPathComponent().toString();
    if (!ind.isEmpty()) {
        ((BusinessDelegate) getVistaNuevaOntologia().getModelo()).addIndividual(ind, clase);
        DefaultListModel model = (DefaultListModel) listIndividuals.getModel();
        model.addElement(new JListItem(ind, Constantes.ICONINDIVIDUAL));
        panelAddIndividual.setVisible(false);
        textFieldAddIndividual.setText("");
    }
}//GEN-LAST:event_buttonOkIndividualActionPerformed

private void buttonAddIndividualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddIndividualActionPerformed
    panelAddIndividual.setVisible(true);
}//GEN-LAST:event_buttonAddIndividualActionPerformed

private void buttonRemoveIndividualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoveIndividualActionPerformed
    panelAddIndividual.setVisible(false);
    DefaultListModel model = (DefaultListModel) listIndividuals.getModel();
    if (!listIndividuals.isSelectionEmpty()) {
        int aux = listIndividuals.getSelectedIndex();
        JListItem item = (JListItem) model.getElementAt(aux);
        String nombre = item.getTitle();
        model.removeElementAt(aux);
        ((BusinessDelegate) getVistaNuevaOntologia().getModelo()).removeIndividual(nombre);
    }
}//GEN-LAST:event_buttonRemoveIndividualActionPerformed

private void buttonCancelIndividualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelIndividualActionPerformed
    panelAddIndividual.setVisible(false);
    textFieldAddIndividual.setText("");
}//GEN-LAST:event_buttonCancelIndividualActionPerformed

private void textFieldClassNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldClassNameFocusGained
// Focus gained del text field del nombre de la clase
    varEnterNameClass = 0;
    classNameAux = textFieldClassName.getText();
}//GEN-LAST:event_textFieldClassNameFocusGained

private void textFieldClassNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldClassNameFocusLost
// Cuando pierde el foco del text field del nombre de la clase
    if (varEnterNameClass == 0) {
        cambiarNombreClase();
    }
}//GEN-LAST:event_textFieldClassNameFocusLost

    public void cambiarNombreClase() {
        if (varEnterNameClass == 0) {
            if (!classNameAux.equalsIgnoreCase(textFieldClassName.getText())) {
                String name = textFieldClassName.getText();
                if (!name.isEmpty()) {
                    ((BusinessDelegate) getVistaNuevaOntologia().getModelo()).changeNameClass(classNameAux, name);
                    DefaultMutableTreeNode node = mapaNodos.get(classNameAux);
                    node.setUserObject(textFieldClassName.getText());
                    mapaNodos.remove(classNameAux);
                    mapaNodos.put(textFieldClassName.getText(), node);
                }
            }
        }
    }

private void buttonAddPropertyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddPropertyActionPerformed
    List<String> pro = getPropiedadesCargadas();
    String name = textFieldClassName.getText();
    PanelListProperties listProperties = new PanelListProperties(main, cargarClase, name, this, pro);
    listProperties.setVisible(true);
}//GEN-LAST:event_buttonAddPropertyActionPerformed

private void buttonRemovePropertyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemovePropertyActionPerformed
    if (!listProperties.isSelectionEmpty()) {
        DefaultListModel model = (DefaultListModel) listProperties.getModel();
        int aux = listProperties.getSelectedIndex();
        JListItem item = (JListItem) model.get(aux);
        String pro = (String) item.getTitle();
        String clase = treeClasses.getSelectionPath().getLastPathComponent().toString();
        ((BusinessDelegate) getVistaNuevaOntologia().getModelo()).removePropertyOfClass(clase, pro);
        model.remove(aux);
    }
}//GEN-LAST:event_buttonRemovePropertyActionPerformed

private void textFieldNombreIndividualFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldNombreIndividualFocusGained
// Gano el foco para el text field del nombre de la instancia
    individualNameAux = textFieldNombreIndividual.getText();
    varEnterNameIndividual = 0;
}//GEN-LAST:event_textFieldNombreIndividualFocusGained

private void textFieldNombreIndividualFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldNombreIndividualFocusLost
    if (varEnterNameIndividual == 0) {
        cambiarNombreIndividual();
    }
}//GEN-LAST:event_textFieldNombreIndividualFocusLost

    public void cambiarNombreIndividual() {
        if (!individualNameAux.equalsIgnoreCase(textFieldNombreIndividual.getText())) {
            String name = textFieldNombreIndividual.getText();
            if (!name.isEmpty()) {
                ((BusinessDelegate) getVistaNuevaOntologia().getModelo()).changeIndividualClass(individualNameAux, name);
                DefaultListModel model = (DefaultListModel) listIndividuals.getModel();
                for (int i = 0; i < model.getSize(); i++) {
                    JListItem item = (JListItem) model.getElementAt(i);
                    if (item.getTitle().equalsIgnoreCase(individualNameAux)) {
                        model.remove(i);
                        item.setTitle(name);
                        model.add(i, item);
                        break;
                    }
                }
            }
        }
    }

private void tabbedPropertyTypeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabbedPropertyTypeStateChanged
    if (tabbedPropertyType.getSelectedIndex() == 0) {
        listPropertiesObject.setSelectedIndex(0);
        cargarObjectProperty();
    } else if (tabbedPropertyType.getSelectedIndex() == 1) {
        listPropertiesDatatype.setSelectedIndex(0);
        cargarDatatypeProperty();
    }
}//GEN-LAST:event_tabbedPropertyTypeStateChanged

private void textFieldNombreClaseKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldNombreClaseKeyTyped
    Character a = new Character(' ');
    if (a.equals(evt.getKeyChar())) {
        evt.setKeyChar('_');
    }
}//GEN-LAST:event_textFieldNombreClaseKeyTyped

private void textFieldClassNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldClassNameKeyTyped
    Character a = new Character(' ');
    if (a.equals(evt.getKeyChar())) {
        evt.setKeyChar('_');
        varEnterNameClass = 0;
    } else if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        varEnterNameClass = 1;
        cambiarNombreClase();
    } else {
        varEnterNameClass = 0;
    }
}//GEN-LAST:event_textFieldClassNameKeyTyped

private void textFieldNameObjectPropertyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldNameObjectPropertyKeyTyped
    Character a = new Character(' ');
    if (a.equals(evt.getKeyChar())) {
        evt.setKeyChar('_');
    }
}//GEN-LAST:event_textFieldNameObjectPropertyKeyTyped

private void textFieldNameDatatypePropertyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldNameDatatypePropertyKeyTyped
    Character a = new Character(' ');
    if (a.equals(evt.getKeyChar())) {
        evt.setKeyChar('_');
    }
}//GEN-LAST:event_textFieldNameDatatypePropertyKeyTyped

private void textFieldAddIndividualKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldAddIndividualKeyTyped
    Character a = new Character(' ');
    if (a.equals(evt.getKeyChar())) {
        evt.setKeyChar('_');
    }
}//GEN-LAST:event_textFieldAddIndividualKeyTyped

private void textFieldNombreIndividualKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldNombreIndividualKeyTyped
    Character a = new Character(' ');
    if (a.equals(evt.getKeyChar())) {
        evt.setKeyChar('_');
        varEnterNameIndividual = 0;
    } else if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
        varEnterNameIndividual = 1;
        cambiarNombreIndividual();
    } else {
        varEnterNameIndividual = 0;
    }
}//GEN-LAST:event_textFieldNombreIndividualKeyTyped

private void textFieldURIFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldURIFocusGained
    varEnterURI = 0;
}//GEN-LAST:event_textFieldURIFocusGained

private void textFieldURIFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldURIFocusLost
    if (varEnterURI == 0) {
        cambiarURI();
    }
}//GEN-LAST:event_textFieldURIFocusLost

private void textFieldURIKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldURIKeyTyped
    if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
        varEnterURI = 1;
        cambiarURI();
    } else {
        varEnterURI = 0;
    }
}//GEN-LAST:event_textFieldURIKeyTyped

//Falta hacer
    public void cambiarURI() {
    }

    private void buttonCargarActionPerformed(javax.swing.event.TreeSelectionEvent evt) {
        this.eventoTree = evt;
        if (!eventoTree.getPath().getLastPathComponent().toString().equals("Classes")) {
            ((ControladorPanelNuevaOntologia) getVistaNuevaOntologia().getControlador()).doCargarClase(true);
        }
    }

    private void buttonCargarInstanciasActionPerformed(javax.swing.event.TreeSelectionEvent evt) {
        this.eventoTree = evt;
        if (!eventoTree.getPath().getLastPathComponent().toString().equals("Classes")) {
            //Cargar ListIndividuals
            vaciarPanelIndProperties();
            String clase = eventoTree.getPath().getLastPathComponent().toString();
            ArrayList<String> individuals = ((BusinessDelegate) getVistaNuevaOntologia().getModelo()).listIndividuals(clase);
            listIndividuals.removeAll();
            DefaultListModel model = new DefaultListModel();
            for (int i = 0; i < individuals.size(); i++) {
                model.addElement(new JListItem(individuals.get(i), Constantes.ICONINDIVIDUAL));
            }
            listIndividuals.setModel(model);
            listIndividuals.setCellRenderer(new JListCellRenderer());
            jScrollPane6.setViewportView(listIndividuals);
        }
    }

    public List<String> getIndividuals(String clase) {
        return ((BusinessDelegate) getVistaNuevaOntologia().getModelo()).listIndividuals(clase);
    }

    private void cargarPaneles() {
        cargarPanelMetadata();
        cargarPanelClases();
        cargarPanelProperty();
        cargarPanelInstancia();
    }

    private void cargarPanelMetadata() {
        String uri = ((BusinessDelegate) getVistaNuevaOntologia().getModelo()).getURIOntologia();
        this.getTextFieldURI().setText(uri);
    }

    private void cargarPanelClases() {
        // Vaciar arbol


        abuelo = new DefaultMutableTreeNode("Classes");
        modelo = new DefaultTreeModel(abuelo);
        treeClasses = new JTree(modelo);

        HashMap<String, String> mapaClases = ((BusinessDelegate) getVistaNuevaOntologia().getModelo()).showClasses();

        Set<Entry<String, String>> setClases = mapaClases.entrySet();
        Iterator itClases = setClases.iterator();
        DefaultMutableTreeNode node = null;
        while (itClases.hasNext()) {
            Entry<String, String> clase = (Entry<String, String>) itClases.next();
            node = new DefaultMutableTreeNode(clase.getKey());
            mapaNodos.put(clase.getKey(), node);
        }
        itClases = setClases.iterator();
        while (itClases.hasNext()) {
            Entry<String, String> clase = (Entry<String, String>) itClases.next();
            if (clase.getValue().isEmpty()) {
                abuelo.add(mapaNodos.get(clase.getKey()));
            } else {
                mapaNodos.get(clase.getValue()).add(mapaNodos.get(clase.getKey()));
            }
        }
        treeClasses.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {

            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                buttonCargarActionPerformed(evt);
            }
        });
        jScrollPane1.setViewportView(treeClasses);
        Object root = treeClasses.getModel().getRoot();
        TreePath path = new TreePath(root);
        treeClasses.expandPath(path);
        ImageIcon leafIcon = createImageIcon(Constantes.ICONTREE);
        if (leafIcon != null) {
            DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer();
            renderer.setLeafIcon(leafIcon);
            renderer.setClosedIcon(leafIcon);
            renderer.setOpenIcon(leafIcon);
            treeClasses.setCellRenderer(renderer);
        }
    }

    private void cargarPanelProperty() {
        List<String> datatypeProperties = ((BusinessDelegate) getVistaNuevaOntologia().getModelo()).showDatatypeProperties();
        List<String> objectProperties = ((BusinessDelegate) getVistaNuevaOntologia().getModelo()).showObjectProperties();

        listPropertiesDatatype.removeAll();
        listPropertiesObject.removeAll();

        DefaultListModel model = new DefaultListModel();
        for (int i = 0; i < datatypeProperties.size(); i++) {
            model.addElement(new JListItem(datatypeProperties.get(i), Constantes.ICONDATATYPEPROPERTY));
        }
        listPropertiesDatatype.setModel(model);
        listPropertiesDatatype.setCellRenderer(new JListCellRenderer());
        jScrollPane4.setViewportView(listPropertiesDatatype);

        DefaultListModel model2 = new DefaultListModel();
        for (int i = 0; i < objectProperties.size(); i++) {
            model2.addElement(new JListItem(objectProperties.get(i), Constantes.ICONOBJECTPROPERTY));
        }
        listPropertiesObject.setModel(model2);
        listPropertiesObject.setCellRenderer(new JListCellRenderer());
        jScrollPane3.setViewportView(listPropertiesObject);
    }

    private void cargarPanelInstancia() {
        //Cargar Arbol
        treeClasses2 = new JTree(modelo);
        treeClasses2.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {

            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                buttonCargarInstanciasActionPerformed(evt);
            }
        });
        jScrollPane5.setViewportView(treeClasses2);
        Object root = treeClasses2.getModel().getRoot();
        TreePath path = new TreePath(root);
        treeClasses2.expandPath(path);
        ImageIcon leafIcon = createImageIcon(Constantes.ICONTREE);
        if (leafIcon != null) {
            DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer();
            renderer.setLeafIcon(leafIcon);
            renderer.setClosedIcon(leafIcon);
            renderer.setOpenIcon(leafIcon);
            treeClasses2.setCellRenderer(renderer);
        }
    }

    public void cargarDatatypeProperty() {
        panelPropertyDefault.removeAll();
        PanelPropertyDatatype panel = new PanelPropertyDatatype(this);
        if (getListPropertiesDatatype().getSelectedValue() != null) {
            String propiedad = getListPropertiesDatatype().getSelectedValue().toString();
            DatatypePropertyVO propiedades = ((BusinessDelegate) getVistaNuevaOntologia().getModelo()).getDatatypeProperty(propiedad);
            panel.setPropiedad(propiedades);
            panel.getTextFieldNombre().setText(propiedades.getName());
            DefaultListModel model = (DefaultListModel) panel.getListDomain().getModel();
            for (int i = 0; i < propiedades.getDomain().size(); i++) {
                model.addElement(new JListItem(propiedades.getDomain().get(i), Constantes.ICONTREE));
            }
            panel.getListDomain().setModel(model);
            String range = propiedades.getRange();
            panel.getComboBoxRange().setSelectedItem(range);
            panelPropertyDefault.add(panel);
            recargarPanel(panelPropertyDefault);
        }
    }

    public void recargarPanel(JPanel panel) {
        panel.repaint();
        panel.invalidate();
        panel.getParent().validate();
    }

    public void cargarObjectProperty() {
        panelPropertyDefault.removeAll();
        PanelPropertyObject panel = new PanelPropertyObject(this);
        if (getListPropertiesObject().getSelectedValue() != null) {
            String propiedad = getListPropertiesObject().getSelectedValue().toString();
            ObjectPropertyVO propiedades = ((BusinessDelegate) getVistaNuevaOntologia().getModelo()).getObjectProperty(propiedad);
            panel.setPropiedad(propiedades);
            panel.getTextFieldNombre().setText(propiedades.getName());
            DefaultListModel model = (DefaultListModel) panel.getListDomain().getModel();
            for (int i = 0; i < propiedades.getDomain().size(); i++) {
                model.addElement(new JListItem(propiedades.getDomain().get(i), Constantes.ICONTREE));
            }
            panel.getListDomain().setModel(model);
            DefaultListModel model2 = (DefaultListModel) panel.getListRange().getModel();
            for (int i = 0; i < propiedades.getRange().size(); i++) {
                model2.addElement(new JListItem(propiedades.getRange().get(i), Constantes.ICONTREE));
            }
            panel.getListRange().setModel(model2);
            panelPropertyDefault.add(panel);
        }
    }

    public void cargarClase() {
        if (treeClasses.getSelectionPath() != null) {
            String instancia = treeClasses.getSelectionPath().getLastPathComponent().toString();
            textFieldClassName.setText(instancia);
            HashMap<String, String> propiedades = ((BusinessDelegate) getVistaNuevaOntologia().getModelo()).ClassProperty(instancia);
            Iterator itkey = propiedades.keySet().iterator();
            Iterator itvalue = propiedades.values().iterator();
            DefaultListModel model = new DefaultListModel();
            for (int i = 0; i < propiedades.size(); i++) {
                String propiedad = (String) itkey.next();
                String value = (String) itvalue.next();
                if (value.equalsIgnoreCase("down")) {
                    model.addElement(new JListItem(propiedad, Constantes.ICONDATATYPEPROPERTY));
                } else if (value.equalsIgnoreCase("oown")) {
                    model.addElement(new JListItem(propiedad, Constantes.ICONOBJECTPROPERTY));
                } else if (value.equalsIgnoreCase("dinherited")) {
                    model.addElement(new JListItem(propiedad, Constantes.ICONINHERITEDDATATYPEPROPERTY));
                } else if (value.equalsIgnoreCase("oinherited")) {
                    model.addElement(new JListItem(propiedad, Constantes.ICONINHERITEDOBJECTPROPERTY));
                }
            }
            listProperties.setModel(model);
            listProperties.setCellRenderer(new JListCellRenderer());
            jScrollPane2.setViewportView(listProperties);
        }
    }

    public void cargarOntologiaDefault() {
        cargarPanelMetadata();
        cargarPanelClases();
        cargarPanelProperty();
    }

    public void vaciarPaneles() {
        textFieldURI.setText("");
        textFieldNombreClase.setText("");
        treeClasses.setModel(new DefaultTreeModel(abuelo));
        treeClasses2.setModel(new DefaultTreeModel(abuelo));
        textFieldClassName.setText("");
        listProperties.setModel(new DefaultListModel());
        getListPropertiesDatatype().setModel(new DefaultListModel());
        getListPropertiesObject().setModel(new DefaultListModel());
        panelPropertyDefault.removeAll();
        listIndividuals.setModel(new DefaultListModel());
        textFieldNombreIndividual.setText("");
        panelIndividualProperties.removeAll();
        this.repaint();
    }

    public List<String> getPropiedadesCargadas() {
        ArrayList<String> pro = new ArrayList<String>();
        DefaultListModel model = (DefaultListModel) listProperties.getModel();
        for (int i = 0; i < model.getSize(); i++) {
            JListItem item = (JListItem) model.getElementAt(i);
            pro.add(item.getTitle());
        }
        return pro;
    }

    public void addClassProperty(String clase, String instancia, String tipo) {
        DefaultListModel model = (DefaultListModel) listProperties.getModel();
        if (tipo.equalsIgnoreCase("datatype")) {
            model.addElement(new JListItem(instancia, Constantes.ICONDATATYPEPROPERTY));
            ((BusinessDelegate) getVistaNuevaOntologia().getModelo()).addDatatypePropertyToClass(clase, instancia);
        } else {
            model.addElement(new JListItem(instancia, Constantes.ICONOBJECTPROPERTY));
            ((BusinessDelegate) getVistaNuevaOntologia().getModelo()).addObjectPropertyToClass(clase, instancia);
        }
    }

//Uso Interno
    private DefaultMutableTreeNode addObject(Object child) {
        DefaultMutableTreeNode parentNode = null;
        TreePath parentPath = treeClasses.getSelectionPath();

        if (parentPath == null) {
            parentNode = abuelo;
        } else {
            parentNode = (DefaultMutableTreeNode) (parentPath.getLastPathComponent());
        }

        return addObject(parentNode, child, true);
    }

    private DefaultMutableTreeNode addObject(DefaultMutableTreeNode parent,
            Object child,
            boolean shouldBeVisible) {
        DefaultMutableTreeNode childNode =
                new DefaultMutableTreeNode(child);

        if (parent == null) {
            parent = abuelo;
        }

        //It is key to invoke this on the TreeModel, and NOT DefaultMutableTreeNode
        modelo.insertNodeInto(childNode, parent,
                parent.getChildCount());
        mapaNodos.put(childNode.getUserObject().toString(), childNode);
        //Make sure the user can see the lovely new node.
        if (shouldBeVisible) {
            treeClasses.scrollPathToVisible(new TreePath(childNode.getPath()));
        }
        return childNode;
    }

    private void removeCurrentNode() {
        TreePath currentSelection = treeClasses.getSelectionPath();
        if (currentSelection != null) {
            DefaultMutableTreeNode currentNode = (DefaultMutableTreeNode) (currentSelection.getLastPathComponent());
            MutableTreeNode parent = (MutableTreeNode) (currentNode.getParent());
            if (parent != null) {
                modelo.removeNodeFromParent(currentNode);
                mapaNodos.remove(currentNode.getUserObject().toString());
                ((BusinessDelegate) getVistaNuevaOntologia().getModelo()).removeClass(currentNode.getUserObject().toString());
                return;
            }
        }

        // Either there was no selection, or the root was selected.
        toolkit.beep();
    }

    protected static ImageIcon createImageIcon(String path) {
        java.net.URL imgURL = PanelNuevaOntologia.class.getResource(path);
        if (path != null) {
            return new ImageIcon(path);
        } else {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAddDatatypeProperty;
    private javax.swing.JButton buttonAddIndividual;
    private javax.swing.JButton buttonAddObjectProperty;
    private javax.swing.JButton buttonAddProperty;
    private javax.swing.JButton buttonAgregarClass;
    private javax.swing.JButton buttonCancelDatatypeProperty;
    private javax.swing.JButton buttonCancelIndividual;
    private javax.swing.JButton buttonCancelNombre;
    private javax.swing.JButton buttonCancelObjectProperty;
    private javax.swing.JButton buttonOkDatatypeProperty;
    private javax.swing.JButton buttonOkIndividual;
    private javax.swing.JButton buttonOkNombre;
    private javax.swing.JButton buttonOkObjectProperty;
    private javax.swing.JButton buttonRemoveDatatypeProperty;
    private javax.swing.JButton buttonRemoveIndividual;
    private javax.swing.JButton buttonRemoveObjectProperty;
    private javax.swing.JButton buttonRemoveProperty;
    private javax.swing.JButton buttonRemoverClass;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JList listIndividuals;
    private javax.swing.JList listProperties;
    private javax.swing.JList listPropertiesDatatype;
    private javax.swing.JList listPropertiesObject;
    private javax.swing.JPanel panelAddDatatypeProperty;
    private javax.swing.JPanel panelAddIndividual;
    private javax.swing.JPanel panelAddObjectProperty;
    private javax.swing.JPanel panelAgregarNombre;
    private javax.swing.JPanel panelClasses;
    private javax.swing.JPanel panelIndividualData;
    private javax.swing.JPanel panelIndividualProperties;
    private javax.swing.JPanel panelIndividuals;
    private javax.swing.JPanel panelMetadata;
    private javax.swing.JPanel panelProperties;
    private javax.swing.JPanel panelPropertyDefault;
    private javax.swing.JPanel panelTabbedDatatypeProperty;
    private javax.swing.JPanel panelTabbedObjectProperty;
    private javax.swing.JTabbedPane tabbedPropertyType;
    private javax.swing.JTextField textFieldAddIndividual;
    private javax.swing.JTextField textFieldClassName;
    private javax.swing.JTextField textFieldNameDatatypeProperty;
    private javax.swing.JTextField textFieldNameObjectProperty;
    private javax.swing.JTextField textFieldNombreClase;
    private javax.swing.JTextField textFieldNombreIndividual;
    private javax.swing.JTextField textFieldURI;
    private javax.swing.JTree treeClasses;
    private javax.swing.JTree treeClasses2;
    // End of variables declaration//GEN-END:variables

    public String getUrlOWL() {
        return urlOWL;
    }

    public void setUrlOWL(String urlOWL) {
        this.urlOWL = urlOWL;
    }

    public String getChooserButton() {
        return chooserButton;
    }

    public void setChooserButton(String chooserButton) {
        this.chooserButton = chooserButton;
    }

    public boolean isCargarOntologia() {
        return cargarOntologia;
    }

    public void setCargarOntologia(boolean cargarOntologia) {
        this.cargarOntologia = cargarOntologia;
    }

    public boolean isNuevaOntologia() {
        return nuevaOntologia;
    }

    public void setNuevaOntologia(boolean nuevaOntologia) {
        this.nuevaOntologia = nuevaOntologia;
    }

    public javax.swing.JTextField getTextFieldURI() {
        return textFieldURI;
    }

    public void setTextFieldURI(javax.swing.JTextField textFieldURI) {
        this.textFieldURI = textFieldURI;
    }

    public boolean isCargarClase() {
        return cargarClase;
    }

    public void setCargarClase(boolean cargarClase) {
        this.cargarClase = cargarClase;
    }

    public boolean isCargarObjectProperty() {
        return cargarObjectProperty;
    }

    public void setCargarObjectProperty(boolean cargarObjectProperty) {
        this.cargarObjectProperty = cargarObjectProperty;
    }

    public boolean isCargarDatatypeProperty() {
        return cargarDatatypeProperty;
    }

    public void setCargarDatatypeProperty(boolean cargarDatatypeProperty) {
        this.cargarDatatypeProperty = cargarDatatypeProperty;
    }

    public VistaNuevaOntologia getVistaNuevaOntologia() {
        return vistaNuevaOntologia;
    }

    public void setVistaNuevaOntologia(VistaNuevaOntologia vistaNuevaOntologia) {
        this.vistaNuevaOntologia = vistaNuevaOntologia;
    }

    public javax.swing.JList getListPropertiesDatatype() {
        return listPropertiesDatatype;
    }

    public void setListPropertiesDatatype(javax.swing.JList listPropertiesDatatype) {
        this.listPropertiesDatatype = listPropertiesDatatype;
    }

    public javax.swing.JList getListPropertiesObject() {
        return listPropertiesObject;
    }

    public void setListPropertiesObject(javax.swing.JList listPropertiesObject) {
        this.listPropertiesObject = listPropertiesObject;
    }

    public FramePrincipal getMain() {
        return main;
    }

    public void setMain(FramePrincipal main) {
        this.main = main;
    }

    public boolean isCargarIndividual() {
        return cargarIndividual;
    }

    public void setCargarIndividual(boolean cargarIndividual) {
        this.cargarIndividual = cargarIndividual;
    }

    private void vaciarPanelIndProperties() {
        panelIndividualProperties.removeAll();
        this.repaint();
    }
}
